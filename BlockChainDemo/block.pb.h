// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: block.proto

#ifndef PROTOBUF_block_2eproto__INCLUDED
#define PROTOBUF_block_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_block_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsinputImpl();
void InitDefaultsinput();
void InitDefaultsoutputImpl();
void InitDefaultsoutput();
void InitDefaultstransactionImpl();
void InitDefaultstransaction();
void InitDefaultsblockheaderImpl();
void InitDefaultsblockheader();
void InitDefaultsblockImpl();
void InitDefaultsblock();
inline void InitDefaults() {
  InitDefaultsinput();
  InitDefaultsoutput();
  InitDefaultstransaction();
  InitDefaultsblockheader();
  InitDefaultsblock();
}
}  // namespace protobuf_block_2eproto
class block;
class blockDefaultTypeInternal;
extern blockDefaultTypeInternal _block_default_instance_;
class blockheader;
class blockheaderDefaultTypeInternal;
extern blockheaderDefaultTypeInternal _blockheader_default_instance_;
class input;
class inputDefaultTypeInternal;
extern inputDefaultTypeInternal _input_default_instance_;
class output;
class outputDefaultTypeInternal;
extern outputDefaultTypeInternal _output_default_instance_;
class transaction;
class transactionDefaultTypeInternal;
extern transactionDefaultTypeInternal _transaction_default_instance_;

// ===================================================================

class input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:input) */ {
 public:
  input();
  virtual ~input();

  input(const input& from);

  inline input& operator=(const input& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  input(input&& from) noexcept
    : input() {
    *this = ::std::move(from);
  }

  inline input& operator=(input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const input* internal_default_instance() {
    return reinterpret_cast<const input*>(
               &_input_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(input* other);
  friend void swap(input& a, input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline input* New() const PROTOBUF_FINAL { return New(NULL); }

  input* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const input& from);
  void MergeFrom(const input& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pretx = 1;
  bool has_pretx() const;
  void clear_pretx();
  static const int kPretxFieldNumber = 1;
  const ::std::string& pretx() const;
  void set_pretx(const ::std::string& value);
  #if LANG_CXX11
  void set_pretx(::std::string&& value);
  #endif
  void set_pretx(const char* value);
  void set_pretx(const char* value, size_t size);
  ::std::string* mutable_pretx();
  ::std::string* release_pretx();
  void set_allocated_pretx(::std::string* pretx);

  // @@protoc_insertion_point(class_scope:input)
 private:
  void set_has_pretx();
  void clear_has_pretx();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pretx_;
  friend struct ::protobuf_block_2eproto::TableStruct;
  friend void ::protobuf_block_2eproto::InitDefaultsinputImpl();
};
// -------------------------------------------------------------------

class output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:output) */ {
 public:
  output();
  virtual ~output();

  output(const output& from);

  inline output& operator=(const output& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  output(output&& from) noexcept
    : output() {
    *this = ::std::move(from);
  }

  inline output& operator=(output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const output* internal_default_instance() {
    return reinterpret_cast<const output*>(
               &_output_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(output* other);
  friend void swap(output& a, output& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline output* New() const PROTOBUF_FINAL { return New(NULL); }

  output* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const output& from);
  void MergeFrom(const output& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string addr = 2;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // required int64 value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int64 value() const;
  void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:output)
 private:
  void set_has_value();
  void clear_has_value();
  void set_has_addr();
  void clear_has_addr();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::int64 value_;
  friend struct ::protobuf_block_2eproto::TableStruct;
  friend void ::protobuf_block_2eproto::InitDefaultsoutputImpl();
};
// -------------------------------------------------------------------

class transaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transaction) */ {
 public:
  transaction();
  virtual ~transaction();

  transaction(const transaction& from);

  inline transaction& operator=(const transaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  transaction(transaction&& from) noexcept
    : transaction() {
    *this = ::std::move(from);
  }

  inline transaction& operator=(transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const transaction* internal_default_instance() {
    return reinterpret_cast<const transaction*>(
               &_transaction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(transaction* other);
  friend void swap(transaction& a, transaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline transaction* New() const PROTOBUF_FINAL { return New(NULL); }

  transaction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const transaction& from);
  void MergeFrom(const transaction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(transaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .input in = 5;
  int in_size() const;
  void clear_in();
  static const int kInFieldNumber = 5;
  const ::input& in(int index) const;
  ::input* mutable_in(int index);
  ::input* add_in();
  ::google::protobuf::RepeatedPtrField< ::input >*
      mutable_in();
  const ::google::protobuf::RepeatedPtrField< ::input >&
      in() const;

  // required string versign = 2;
  bool has_versign() const;
  void clear_versign();
  static const int kVersignFieldNumber = 2;
  const ::std::string& versign() const;
  void set_versign(const ::std::string& value);
  #if LANG_CXX11
  void set_versign(::std::string&& value);
  #endif
  void set_versign(const char* value);
  void set_versign(const char* value, size_t size);
  ::std::string* mutable_versign();
  ::std::string* release_versign();
  void set_allocated_versign(::std::string* versign);

  // required string pubkey = 3;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubkeyFieldNumber = 3;
  const ::std::string& pubkey() const;
  void set_pubkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pubkey(::std::string&& value);
  #endif
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  ::std::string* mutable_pubkey();
  ::std::string* release_pubkey();
  void set_allocated_pubkey(::std::string* pubkey);

  // required string txhash = 4;
  bool has_txhash() const;
  void clear_txhash();
  static const int kTxhashFieldNumber = 4;
  const ::std::string& txhash() const;
  void set_txhash(const ::std::string& value);
  #if LANG_CXX11
  void set_txhash(::std::string&& value);
  #endif
  void set_txhash(const char* value);
  void set_txhash(const char* value, size_t size);
  ::std::string* mutable_txhash();
  ::std::string* release_txhash();
  void set_allocated_txhash(::std::string* txhash);

  // required .output out = 6;
  bool has_out() const;
  void clear_out();
  static const int kOutFieldNumber = 6;
  const ::output& out() const;
  ::output* release_out();
  ::output* mutable_out();
  void set_allocated_out(::output* out);

  // required int64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:transaction)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_versign();
  void clear_has_versign();
  void set_has_pubkey();
  void clear_has_pubkey();
  void set_has_txhash();
  void clear_has_txhash();
  void set_has_out();
  void clear_has_out();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::input > in_;
  ::google::protobuf::internal::ArenaStringPtr versign_;
  ::google::protobuf::internal::ArenaStringPtr pubkey_;
  ::google::protobuf::internal::ArenaStringPtr txhash_;
  ::output* out_;
  ::google::protobuf::int64 time_;
  friend struct ::protobuf_block_2eproto::TableStruct;
  friend void ::protobuf_block_2eproto::InitDefaultstransactionImpl();
};
// -------------------------------------------------------------------

class blockheader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:blockheader) */ {
 public:
  blockheader();
  virtual ~blockheader();

  blockheader(const blockheader& from);

  inline blockheader& operator=(const blockheader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  blockheader(blockheader&& from) noexcept
    : blockheader() {
    *this = ::std::move(from);
  }

  inline blockheader& operator=(blockheader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const blockheader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const blockheader* internal_default_instance() {
    return reinterpret_cast<const blockheader*>(
               &_blockheader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(blockheader* other);
  friend void swap(blockheader& a, blockheader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline blockheader* New() const PROTOBUF_FINAL { return New(NULL); }

  blockheader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const blockheader& from);
  void MergeFrom(const blockheader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(blockheader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string merkleroot = 3;
  bool has_merkleroot() const;
  void clear_merkleroot();
  static const int kMerklerootFieldNumber = 3;
  const ::std::string& merkleroot() const;
  void set_merkleroot(const ::std::string& value);
  #if LANG_CXX11
  void set_merkleroot(::std::string&& value);
  #endif
  void set_merkleroot(const char* value);
  void set_merkleroot(const char* value, size_t size);
  ::std::string* mutable_merkleroot();
  ::std::string* release_merkleroot();
  void set_allocated_merkleroot(::std::string* merkleroot);

  // required string target = 4;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 4;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  #if LANG_CXX11
  void set_target(::std::string&& value);
  #endif
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // required int64 time = 1;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int64 time() const;
  void set_time(::google::protobuf::int64 value);

  // required int64 nonce = 2;
  bool has_nonce() const;
  void clear_nonce();
  static const int kNonceFieldNumber = 2;
  ::google::protobuf::int64 nonce() const;
  void set_nonce(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:blockheader)
 private:
  void set_has_time();
  void clear_has_time();
  void set_has_nonce();
  void clear_has_nonce();
  void set_has_merkleroot();
  void clear_has_merkleroot();
  void set_has_target();
  void clear_has_target();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr merkleroot_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 nonce_;
  friend struct ::protobuf_block_2eproto::TableStruct;
  friend void ::protobuf_block_2eproto::InitDefaultsblockheaderImpl();
};
// -------------------------------------------------------------------

class block : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:block) */ {
 public:
  block();
  virtual ~block();

  block(const block& from);

  inline block& operator=(const block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  block(block&& from) noexcept
    : block() {
    *this = ::std::move(from);
  }

  inline block& operator=(block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const block* internal_default_instance() {
    return reinterpret_cast<const block*>(
               &_block_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(block* other);
  friend void swap(block& a, block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline block* New() const PROTOBUF_FINAL { return New(NULL); }

  block* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const block& from);
  void MergeFrom(const block& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .transaction txs = 2;
  int txs_size() const;
  void clear_txs();
  static const int kTxsFieldNumber = 2;
  const ::transaction& txs(int index) const;
  ::transaction* mutable_txs(int index);
  ::transaction* add_txs();
  ::google::protobuf::RepeatedPtrField< ::transaction >*
      mutable_txs();
  const ::google::protobuf::RepeatedPtrField< ::transaction >&
      txs() const;

  // required .blockheader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::blockheader& header() const;
  ::blockheader* release_header();
  ::blockheader* mutable_header();
  void set_allocated_header(::blockheader* header);

  // @@protoc_insertion_point(class_scope:block)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::transaction > txs_;
  ::blockheader* header_;
  friend struct ::protobuf_block_2eproto::TableStruct;
  friend void ::protobuf_block_2eproto::InitDefaultsblockImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// input

// required string pretx = 1;
inline bool input::has_pretx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void input::set_has_pretx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void input::clear_has_pretx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void input::clear_pretx() {
  pretx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretx();
}
inline const ::std::string& input::pretx() const {
  // @@protoc_insertion_point(field_get:input.pretx)
  return pretx_.GetNoArena();
}
inline void input::set_pretx(const ::std::string& value) {
  set_has_pretx();
  pretx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:input.pretx)
}
#if LANG_CXX11
inline void input::set_pretx(::std::string&& value) {
  set_has_pretx();
  pretx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:input.pretx)
}
#endif
inline void input::set_pretx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pretx();
  pretx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:input.pretx)
}
inline void input::set_pretx(const char* value, size_t size) {
  set_has_pretx();
  pretx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:input.pretx)
}
inline ::std::string* input::mutable_pretx() {
  set_has_pretx();
  // @@protoc_insertion_point(field_mutable:input.pretx)
  return pretx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* input::release_pretx() {
  // @@protoc_insertion_point(field_release:input.pretx)
  clear_has_pretx();
  return pretx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void input::set_allocated_pretx(::std::string* pretx) {
  if (pretx != NULL) {
    set_has_pretx();
  } else {
    clear_has_pretx();
  }
  pretx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretx);
  // @@protoc_insertion_point(field_set_allocated:input.pretx)
}

// -------------------------------------------------------------------

// output

// required int64 value = 1;
inline bool output::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void output::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void output::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void output::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 output::value() const {
  // @@protoc_insertion_point(field_get:output.value)
  return value_;
}
inline void output::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:output.value)
}

// required string addr = 2;
inline bool output::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void output::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void output::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void output::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
inline const ::std::string& output::addr() const {
  // @@protoc_insertion_point(field_get:output.addr)
  return addr_.GetNoArena();
}
inline void output::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:output.addr)
}
#if LANG_CXX11
inline void output::set_addr(::std::string&& value) {
  set_has_addr();
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:output.addr)
}
#endif
inline void output::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:output.addr)
}
inline void output::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:output.addr)
}
inline ::std::string* output::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:output.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* output::release_addr() {
  // @@protoc_insertion_point(field_release:output.addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void output::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:output.addr)
}

// -------------------------------------------------------------------

// transaction

// required int64 time = 1;
inline bool transaction::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void transaction::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void transaction::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void transaction::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 transaction::time() const {
  // @@protoc_insertion_point(field_get:transaction.time)
  return time_;
}
inline void transaction::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:transaction.time)
}

// required string versign = 2;
inline bool transaction::has_versign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void transaction::set_has_versign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void transaction::clear_has_versign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void transaction::clear_versign() {
  versign_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_versign();
}
inline const ::std::string& transaction::versign() const {
  // @@protoc_insertion_point(field_get:transaction.versign)
  return versign_.GetNoArena();
}
inline void transaction::set_versign(const ::std::string& value) {
  set_has_versign();
  versign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transaction.versign)
}
#if LANG_CXX11
inline void transaction::set_versign(::std::string&& value) {
  set_has_versign();
  versign_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transaction.versign)
}
#endif
inline void transaction::set_versign(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_versign();
  versign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transaction.versign)
}
inline void transaction::set_versign(const char* value, size_t size) {
  set_has_versign();
  versign_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transaction.versign)
}
inline ::std::string* transaction::mutable_versign() {
  set_has_versign();
  // @@protoc_insertion_point(field_mutable:transaction.versign)
  return versign_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transaction::release_versign() {
  // @@protoc_insertion_point(field_release:transaction.versign)
  clear_has_versign();
  return versign_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transaction::set_allocated_versign(::std::string* versign) {
  if (versign != NULL) {
    set_has_versign();
  } else {
    clear_has_versign();
  }
  versign_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), versign);
  // @@protoc_insertion_point(field_set_allocated:transaction.versign)
}

// required string pubkey = 3;
inline bool transaction::has_pubkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void transaction::set_has_pubkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void transaction::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void transaction::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pubkey();
}
inline const ::std::string& transaction::pubkey() const {
  // @@protoc_insertion_point(field_get:transaction.pubkey)
  return pubkey_.GetNoArena();
}
inline void transaction::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transaction.pubkey)
}
#if LANG_CXX11
inline void transaction::set_pubkey(::std::string&& value) {
  set_has_pubkey();
  pubkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transaction.pubkey)
}
#endif
inline void transaction::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transaction.pubkey)
}
inline void transaction::set_pubkey(const char* value, size_t size) {
  set_has_pubkey();
  pubkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transaction.pubkey)
}
inline ::std::string* transaction::mutable_pubkey() {
  set_has_pubkey();
  // @@protoc_insertion_point(field_mutable:transaction.pubkey)
  return pubkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transaction::release_pubkey() {
  // @@protoc_insertion_point(field_release:transaction.pubkey)
  clear_has_pubkey();
  return pubkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transaction::set_allocated_pubkey(::std::string* pubkey) {
  if (pubkey != NULL) {
    set_has_pubkey();
  } else {
    clear_has_pubkey();
  }
  pubkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:transaction.pubkey)
}

// required string txhash = 4;
inline bool transaction::has_txhash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void transaction::set_has_txhash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void transaction::clear_has_txhash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void transaction::clear_txhash() {
  txhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_txhash();
}
inline const ::std::string& transaction::txhash() const {
  // @@protoc_insertion_point(field_get:transaction.txhash)
  return txhash_.GetNoArena();
}
inline void transaction::set_txhash(const ::std::string& value) {
  set_has_txhash();
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transaction.txhash)
}
#if LANG_CXX11
inline void transaction::set_txhash(::std::string&& value) {
  set_has_txhash();
  txhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transaction.txhash)
}
#endif
inline void transaction::set_txhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_txhash();
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transaction.txhash)
}
inline void transaction::set_txhash(const char* value, size_t size) {
  set_has_txhash();
  txhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transaction.txhash)
}
inline ::std::string* transaction::mutable_txhash() {
  set_has_txhash();
  // @@protoc_insertion_point(field_mutable:transaction.txhash)
  return txhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* transaction::release_txhash() {
  // @@protoc_insertion_point(field_release:transaction.txhash)
  clear_has_txhash();
  return txhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void transaction::set_allocated_txhash(::std::string* txhash) {
  if (txhash != NULL) {
    set_has_txhash();
  } else {
    clear_has_txhash();
  }
  txhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txhash);
  // @@protoc_insertion_point(field_set_allocated:transaction.txhash)
}

// repeated .input in = 5;
inline int transaction::in_size() const {
  return in_.size();
}
inline void transaction::clear_in() {
  in_.Clear();
}
inline const ::input& transaction::in(int index) const {
  // @@protoc_insertion_point(field_get:transaction.in)
  return in_.Get(index);
}
inline ::input* transaction::mutable_in(int index) {
  // @@protoc_insertion_point(field_mutable:transaction.in)
  return in_.Mutable(index);
}
inline ::input* transaction::add_in() {
  // @@protoc_insertion_point(field_add:transaction.in)
  return in_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::input >*
transaction::mutable_in() {
  // @@protoc_insertion_point(field_mutable_list:transaction.in)
  return &in_;
}
inline const ::google::protobuf::RepeatedPtrField< ::input >&
transaction::in() const {
  // @@protoc_insertion_point(field_list:transaction.in)
  return in_;
}

// required .output out = 6;
inline bool transaction::has_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void transaction::set_has_out() {
  _has_bits_[0] |= 0x00000008u;
}
inline void transaction::clear_has_out() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void transaction::clear_out() {
  if (out_ != NULL) out_->Clear();
  clear_has_out();
}
inline const ::output& transaction::out() const {
  const ::output* p = out_;
  // @@protoc_insertion_point(field_get:transaction.out)
  return p != NULL ? *p : *reinterpret_cast<const ::output*>(
      &::_output_default_instance_);
}
inline ::output* transaction::release_out() {
  // @@protoc_insertion_point(field_release:transaction.out)
  clear_has_out();
  ::output* temp = out_;
  out_ = NULL;
  return temp;
}
inline ::output* transaction::mutable_out() {
  set_has_out();
  if (out_ == NULL) {
    out_ = new ::output;
  }
  // @@protoc_insertion_point(field_mutable:transaction.out)
  return out_;
}
inline void transaction::set_allocated_out(::output* out) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete out_;
  }
  if (out) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      out = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, out, submessage_arena);
    }
    set_has_out();
  } else {
    clear_has_out();
  }
  out_ = out;
  // @@protoc_insertion_point(field_set_allocated:transaction.out)
}

// -------------------------------------------------------------------

// blockheader

// required int64 time = 1;
inline bool blockheader::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void blockheader::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void blockheader::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void blockheader::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 blockheader::time() const {
  // @@protoc_insertion_point(field_get:blockheader.time)
  return time_;
}
inline void blockheader::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:blockheader.time)
}

// required int64 nonce = 2;
inline bool blockheader::has_nonce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void blockheader::set_has_nonce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void blockheader::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void blockheader::clear_nonce() {
  nonce_ = GOOGLE_LONGLONG(0);
  clear_has_nonce();
}
inline ::google::protobuf::int64 blockheader::nonce() const {
  // @@protoc_insertion_point(field_get:blockheader.nonce)
  return nonce_;
}
inline void blockheader::set_nonce(::google::protobuf::int64 value) {
  set_has_nonce();
  nonce_ = value;
  // @@protoc_insertion_point(field_set:blockheader.nonce)
}

// required string merkleroot = 3;
inline bool blockheader::has_merkleroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void blockheader::set_has_merkleroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void blockheader::clear_has_merkleroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void blockheader::clear_merkleroot() {
  merkleroot_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_merkleroot();
}
inline const ::std::string& blockheader::merkleroot() const {
  // @@protoc_insertion_point(field_get:blockheader.merkleroot)
  return merkleroot_.GetNoArena();
}
inline void blockheader::set_merkleroot(const ::std::string& value) {
  set_has_merkleroot();
  merkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blockheader.merkleroot)
}
#if LANG_CXX11
inline void blockheader::set_merkleroot(::std::string&& value) {
  set_has_merkleroot();
  merkleroot_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blockheader.merkleroot)
}
#endif
inline void blockheader::set_merkleroot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_merkleroot();
  merkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blockheader.merkleroot)
}
inline void blockheader::set_merkleroot(const char* value, size_t size) {
  set_has_merkleroot();
  merkleroot_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blockheader.merkleroot)
}
inline ::std::string* blockheader::mutable_merkleroot() {
  set_has_merkleroot();
  // @@protoc_insertion_point(field_mutable:blockheader.merkleroot)
  return merkleroot_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* blockheader::release_merkleroot() {
  // @@protoc_insertion_point(field_release:blockheader.merkleroot)
  clear_has_merkleroot();
  return merkleroot_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void blockheader::set_allocated_merkleroot(::std::string* merkleroot) {
  if (merkleroot != NULL) {
    set_has_merkleroot();
  } else {
    clear_has_merkleroot();
  }
  merkleroot_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkleroot);
  // @@protoc_insertion_point(field_set_allocated:blockheader.merkleroot)
}

// required string target = 4;
inline bool blockheader::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void blockheader::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void blockheader::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void blockheader::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target();
}
inline const ::std::string& blockheader::target() const {
  // @@protoc_insertion_point(field_get:blockheader.target)
  return target_.GetNoArena();
}
inline void blockheader::set_target(const ::std::string& value) {
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:blockheader.target)
}
#if LANG_CXX11
inline void blockheader::set_target(::std::string&& value) {
  set_has_target();
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:blockheader.target)
}
#endif
inline void blockheader::set_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:blockheader.target)
}
inline void blockheader::set_target(const char* value, size_t size) {
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:blockheader.target)
}
inline ::std::string* blockheader::mutable_target() {
  set_has_target();
  // @@protoc_insertion_point(field_mutable:blockheader.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* blockheader::release_target() {
  // @@protoc_insertion_point(field_release:blockheader.target)
  clear_has_target();
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void blockheader::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    set_has_target();
  } else {
    clear_has_target();
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:blockheader.target)
}

// -------------------------------------------------------------------

// block

// required .blockheader header = 1;
inline bool block::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void block::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void block::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void block::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
inline const ::blockheader& block::header() const {
  const ::blockheader* p = header_;
  // @@protoc_insertion_point(field_get:block.header)
  return p != NULL ? *p : *reinterpret_cast<const ::blockheader*>(
      &::_blockheader_default_instance_);
}
inline ::blockheader* block::release_header() {
  // @@protoc_insertion_point(field_release:block.header)
  clear_has_header();
  ::blockheader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::blockheader* block::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::blockheader;
  }
  // @@protoc_insertion_point(field_mutable:block.header)
  return header_;
}
inline void block::set_allocated_header(::blockheader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:block.header)
}

// repeated .transaction txs = 2;
inline int block::txs_size() const {
  return txs_.size();
}
inline void block::clear_txs() {
  txs_.Clear();
}
inline const ::transaction& block::txs(int index) const {
  // @@protoc_insertion_point(field_get:block.txs)
  return txs_.Get(index);
}
inline ::transaction* block::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:block.txs)
  return txs_.Mutable(index);
}
inline ::transaction* block::add_txs() {
  // @@protoc_insertion_point(field_add:block.txs)
  return txs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::transaction >*
block::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:block.txs)
  return &txs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::transaction >&
block::txs() const {
  // @@protoc_insertion_point(field_list:block.txs)
  return txs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_block_2eproto__INCLUDED
